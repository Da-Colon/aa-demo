/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  type PayableOverrides,
  type BigNumberish,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SubscriptionPaymaster,
  SubscriptionPaymasterInterface,
} from "../../contracts/SubscriptionPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenChargePerHour",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ServicePaid",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenChargePerHour",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "userOpHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxCost",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "validationData",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052604051610f6c380380610f6c83398101604081905261002291610119565b8261002c336100b1565b6001600160a01b039081166080819052600180546001600160a01b03191692851692909217909155600282905560405163b760faf960e01b815230600482015263b760faf99034906024016000604051808303818588803b15801561009057600080fd5b505af11580156100a4573d6000803e3d6000fd5b505050505050505061015c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461011657600080fd5b50565b60008060006060848603121561012e57600080fd5b835161013981610101565b602085015190935061014a81610101565b80925050604084015190509250925092565b608051610dc46101a860003960008181610195015281816102bd01528181610354015281816103d001528181610464015281816104db01528181610568015261070b0152610dc46000f3fe6080604052600436106100dd5760003560e01c8063bd391c641161007f578063d0e30db011610059578063d0e30db014610225578063f2fde38b1461022d578063f465c77e1461024d578063fc0c546a1461027b57600080fd5b8063bd391c64146101cc578063c23a5cea146101f0578063c399ec881461021057600080fd5b80638da5cb5b116100bb5780638da5cb5b1461012c578063a9a2340914610163578063b0d691fe14610183578063bb9fe6bf146101b757600080fd5b80630396cb60146100e2578063205c2878146100f7578063715018a614610117575b600080fd5b6100f56100f036600461094a565b61029b565b005b34801561010357600080fd5b506100f561011236600461098c565b610326565b34801561012357600080fd5b506100f5610398565b34801561013857600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016f57600080fd5b506100f561017e3660046109b8565b6103ac565b34801561018f57600080fd5b506101467f000000000000000000000000000000000000000000000000000000000000000081565b3480156101c357600080fd5b506100f56103c6565b3480156101d857600080fd5b506101e260025481565b60405190815260200161015a565b3480156101fc57600080fd5b506100f561020b366004610a47565b61043d565b34801561021c57600080fd5b506101e26104c3565b6100f5610553565b34801561023957600080fd5b506100f5610248366004610a47565b6105b5565b34801561025957600080fd5b5061026d610268366004610a74565b610633565b60405161015a929190610ac8565b34801561028757600080fd5b50600154610146906001600160a01b031681565b6102a3610656565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b505050505050565b61032e610656565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561030a57600080fd5b6103a0610656565b6103aa60006106b0565b565b6103b4610700565b6103c084848484610770565b50505050565b6103ce610656565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561042957600080fd5b505af11580156103c0573d6000803e3d6000fd5b610445610656565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561052a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054e9190610b1d565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b1580156104a857600080fd5b6105bd610656565b6001600160a01b0381166106275760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610630816106b0565b50565b6060600061063f610700565b61064a85858561079d565b91509150935093915050565b6000546001600160a01b031633146103aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161061e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103aa5760405162461bcd60e51b815260206004820152601560248201527414d95b99195c881b9bdd08115b9d1c9e541bda5b9d605a1b604482015260640161061e565b600184600281111561078457610784610b36565b146103c057600284600281111561031e5761031e610b36565b60606000806107af6020870187610a47565b905060006107c06020880188610a47565b90506000816001600160a01b031663ff0b906c6040518163ffffffff1660e01b815260040160c060405180830381865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108269190610b67565b90508060a001516108725760405162461bcd60e51b815260206004820152601660248201527527379030b1ba34bb329039bab139b1b934b83a34b7b760511b604482015260640161061e565b60405163ecf509bb60e01b81526001600160a01b0383169063ecf509bb906108a0908b908b90600401610c75565b600060405180830381600087803b1580156108ba57600080fd5b505af19250505080156108cb575060015b6109175760405162461bcd60e51b815260206004820152601e60248201527f537562736372697074696f6e2070726f63657373696e67206661696c65640000604482015260640161061e565b604080516001600160a01b03851660208201520160408051601f1981840301815291905298600098509650505050505050565b60006020828403121561095c57600080fd5b813563ffffffff8116811461097057600080fd5b9392505050565b6001600160a01b038116811461063057600080fd5b6000806040838503121561099f57600080fd5b82356109aa81610977565b946020939093013593505050565b600080600080606085870312156109ce57600080fd5b8435600381106109dd57600080fd5b9350602085013567ffffffffffffffff808211156109fa57600080fd5b818701915087601f830112610a0e57600080fd5b813581811115610a1d57600080fd5b886020828501011115610a2f57600080fd5b95986020929092019750949560400135945092505050565b600060208284031215610a5957600080fd5b813561097081610977565b8035610a6f81610977565b919050565b600080600060608486031215610a8957600080fd5b833567ffffffffffffffff811115610aa057600080fd5b84016101608187031215610ab357600080fd5b95602085013595506040909401359392505050565b604081526000835180604084015260005b81811015610af65760208187018101516060868401015201610ad9565b506000606082850101526060601f19601f8301168401019150508260208301529392505050565b600060208284031215610b2f57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b8051610a6f81610977565b80518015158114610a6f57600080fd5b600060c08284031215610b7957600080fd5b60405160c0810181811067ffffffffffffffff82111715610baa57634e487b7160e01b600052604160045260246000fd5b604052610bb683610b4c565b8152610bc460208401610b4c565b6020820152604083015160408201526060830151606082015260808301516080820152610bf360a08401610b57565b60a08201529392505050565b6000808335601e19843603018112610c1657600080fd5b830160208101925035905067ffffffffffffffff811115610c3657600080fd5b803603821315610c4557600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152610c9660408201610c8985610a64565b6001600160a01b03169052565b602083013560608201526000610caf6040850185610bff565b610160806080860152610cc76101a086018385610c4c565b9250610cd66060880188610bff565b9250603f19808786030160a0880152610cf0858584610c4c565b9450608089013560c088015260a089013560e0880152610100935060c089013584880152610120915060e089013582880152610140848a013581890152610d39838b018b610bff565b95509250818887030184890152610d51868685610c4c565b9550610d5f818b018b610bff565b955093505080878603016101808801525050610d7c838383610c4c565b9350505050826020830152939250505056fea26469706673582212208499355098162864680f030a8ee1c186681cef5fb20c100a769837147c88cc9364736f6c63430008120033";

type SubscriptionPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubscriptionPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubscriptionPaymaster__factory extends ContractFactory {
  constructor(...args: SubscriptionPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _entryPoint: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenChargePerHour: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<SubscriptionPaymaster> {
    return super.deploy(
      _entryPoint,
      _token,
      _tokenChargePerHour,
      overrides || {}
    ) as Promise<SubscriptionPaymaster>;
  }
  override getDeployTransaction(
    _entryPoint: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _tokenChargePerHour: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _entryPoint,
      _token,
      _tokenChargePerHour,
      overrides || {}
    );
  }
  override attach(address: string): SubscriptionPaymaster {
    return super.attach(address) as SubscriptionPaymaster;
  }
  override connect(signer: Signer): SubscriptionPaymaster__factory {
    return super.connect(signer) as SubscriptionPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionPaymasterInterface {
    return new utils.Interface(_abi) as SubscriptionPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubscriptionPaymaster {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SubscriptionPaymaster;
  }
}
